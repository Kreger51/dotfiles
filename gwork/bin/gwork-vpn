#!/usr/bin/env bash

set -eux
set -o pipefail

server=${VPN_SERVER}
username=${VPN_USERNAME}
pidfile=/run/openconnect.pid
fix_vpn_dns=$(command -v fix-vpn-dns)

usage() {
    echo "USAGE: $(basename $0) up|down|status"
    exit 1
}

if [ $# -ne 1 ]; then
    echo "missing arg"
    usage
fi

set +x
resolvconf_dir="/etc/systemd/resolved.conf.d"
gwork_resolvconf_path="${resolvconf_dir}/gwork.conf"
gwork_resolvconf=$(
    cat <<EOF
[Resolve]
DNS=10.10.2.36 10.10.2.37
EOF
)
set -x

vpn_up() {
    # Inspired by https://github.com/archf/vpn-split-dns/blob/master/vpn
    if [ -f $pidfile ]; then
        pid=$(cat $pidfile)
        echo "openconnect process already running at pid=$pid"
    else
        openconnect_command="sudo openconnect --background "--pid-file=$pidfile" "--user=$username" "$server""
        if [[ -v ASKPASS ]]; then
            $openconnect_command
        else
            op item get '(Garda) sbelhaouane' --fields label=password 2>&1 |
                cat - <(echo 1) |
                $openconnect_command --passwd-on-stdin
        fi
        # TODO: Don't think we need this anymore.
        # Wait for openconnect to change resolv.conf
        # sleep 2s
        # sudo $fix_vpn_dns
        sudo mkdir -p "$resolvconf_dir"
        echo "$gwork_resolvconf" | sudo tee "$gwork_resolvconf_path" >/dev/null
        sudo systemctl restart systemd-resolved.service
    fi
}

vpn_down() {
    sudo rm -rf "$gwork_resolvconf_path"
    if [ -f $pidfile ]; then
        pid="$(cat $pidfile)"
        sudo kill -SIGINT $pid
        sudo rm -rf $pidfile
    else
        echo "openconnect process is not running"
    fi
}

vpn_status() {
    if [ -f $pidfile ]; then
        pid="$(cat $pidfile)"
        echo "openconnect running under process $pid"
    else
        echo "openconnect process is not running"
    fi
}

cmd="$1"
case $cmd in
up)
    vpn_up
    ;;
down)
    vpn_down
    ;;
status)
    vpn_status
    ;;
*)
    usage
    ;;
esac
