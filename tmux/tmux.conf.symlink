# Use 256 colors
# set -g default-terminal "xterm-256color"
# Highlight current pane with red border
# set-option -g pane-active-border-fg red

# Add session name to status bar
set -g status-left ' [#S] '

# Copy path to clipboard
bind y run "tmux set-buffer \"#{pane_current_path}\""

## Saner Split Commands
# split panes using | and -
bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

# Clear history
bind -n C-k clear-history

# Set tmux to use vi keys
setw -g mode-keys vi

# Normal mode
# bind Escape copy-mode # `tmux prefix + Escape` starts copy mode.
# bind p paste-buffer # `prefix + p` pastes the latest buffer
# Copy mode
# bind -t vi-copy 'v' begin-selection  # `v` begins a selection. (movement keys to select the desired bits)
# bind -t vi-copy 'y' copy-selection  # `y` copies the current selection to one of tmux's "paste buffers"
# bind -t vi-copy Y copy-end-of-line # ^1

set-window-option -g xterm-keys on # Enables ctrl+arrow (and maybe other stuff)

# Makes start-directory for new windows/panes work
set -g default-command $SHELL
set-environment -g CHERE_INVOKING 1

# Enable selecting panes with mouse
set -g mouse on

# Copy to system clipboard
# Requires xclip on Linux, and reattach-to-user-namespace on MacOS
# https://unix.stackexchange.com/a/349020
# https://www.freecodecamp.org/news/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b/
# https://www.seanh.cc/2020/12/27/copy-and-paste-in-tmux/
# https://thoughtbot.com/blog/tmux-copy-paste-on-os-x-a-better-future
set-option -s set-clipboard off
if-shell 'uname | grep -q Darwin' {
    bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-no-clear "reattach-to-user-namespace pbcopy"
    bind-key -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send-keys -X copy-pipe-no-clear "reattach-to-user-namespace pbcopy"
    bind-key -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send-keys -X copy-pipe-no-clear "reattach-to-user-namespace pbcopy"
    bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "reattach-to-user-namespace pbcopy"
    bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "reattach-to-user-namespace pbcopy"
}
# For some reason I'm unable to properly use the "else" clause with `if-shell`...
if-shell 'uname | grep -v -q Darwin' {
    bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-no-clear "xclip -selection clipboard -i"
    bind-key -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send-keys -X copy-pipe-no-clear "xclip -selection clipboard -i"
    bind-key -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send-keys -X copy-pipe-no-clear "xclip -selection clipboard -i"
    bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xclip -selection clipboard -i"
    bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "xclip -selection clipboard -i"
}