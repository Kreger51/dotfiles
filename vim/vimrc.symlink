" Don't try to be vi compatible
set nocompatible
" Screw swap files
set noswapfile
" Don't use clipboard as default register
set clipboard:

" =========================================================
" Colors
" =========================================================
syntax on
" " Solarized colorscheme
" set t_Co=256
" let g:solarized_termcolors=256
" let g:solarized_termtrans=1
" set background=light
" colorscheme solarized
" Show trailing whitespace:
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
" Diff colors
highlight DiffAdd    term=bold ctermfg=2 ctermbg=7
highlight DiffDelete term=bold ctermfg=2 ctermbg=7
highlight DiffChange term=bold ctermfg=2 ctermbg=7
highlight DiffText   term=standout cterm=bold ctermfg=7 ctermbg=1
" =========================================================

" =========================================================
" Miscellaneous
" =========================================================
" UTF-8 encoding
set enc=utf-8
" Fix delay when pressing O after Escape
" See https://github.com/vim/vim/issues/24
set timeout timeoutlen=5000 ttimeoutlen=100
" Smart case sensitiveness when searching
set ignorecase
set smartcase
" Treat .tex files as latex
let g:tex_flavor = "latex"
" Have vimdiff ignore whitespace while normal vim doesn't
" From http://vim.wikia.com/wiki/Ignore_white_space_in_vimdiff
if &diff
    " diff mode
    set diffopt+=iwhite
endif
" =========================================================

" =========================================================
" Spaces and Tabs
" =========================================================
set expandtab     " Convert tabs to spaces. Screw tabs.
set shiftwidth=4  " Number of spaces per indent level.
set softtabstop=4 " Number of visual spaces per tab.
set smartindent   " Smart indent on new lines.
set autoindent    " Use indentation from previous line.
" Allow backspacing over everything in insert mode.
set bs=indent,eol,start
" Delete trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
" Visualize tabs and newlines
set list
set listchars=tab:>-
" =========================================================

" =========================================================
" UI Configuration
" =========================================================
set ruler         " Always show cursor position.
set number        " Show line numbers.
set cursorline    " Highlight line where cursor is.
set wildmenu      " Show menu for autocomplete in ex mode.
set hlsearch      " Highlight search.
" =========================================================

" =========================================================
" Status line
" =========================================================
function! GitBranch()
  let branch = system("git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* //'")
  if branch != ''
    return substitute(branch, '\n', '', 'g')
  en
  return ''
endfunction
set laststatus=2  " Show statusline
let hidegit=$VIM_HIDE_GIT
if hidegit != '1'
  set statusline+=(%{GitBranch()})
endif
set statusline+=\ \ %F
set statusline+=%3(%m%)
set statusline+=%8((%l,%c)%)\            " line and column
set statusline+=%P                        " percentage of file
" =========================================================

" =========================================================
" Macros & Functions
" =========================================================
" Fortran-specific
" ---------------------------------------------------------
let fortran_do_enddo=1
" =========================================================

" =========================================================
" Remaps
" =========================================================
let mapleader=","
let maplocalleader="\\"
" Remap arrow keys to move between vim windows
" mouhahaha
nnoremap <Right> <C-w>l
nnoremap <Left> <C-w>h
nnoremap <Up> <C-w>k
nnoremap <Down> <C-w>j
" Search for visually selected text
vnoremap // y/<C-R>"<CR>
" Search for whole word.
nnoremap <Leader>/ :exec "/\\<".input("Enter word. ")."\\>"<CR>
" =========================================================
